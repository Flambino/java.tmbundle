/**
 ** Java syntax dictionary for TextMate.
 ** Author: Brian Lalor <blalor@bravo5.org>
 **
 ** $URL$
 ** $Id$
 ** 
 ** http://www.javacamp.org/javaI/reservedWords.html
 **/
{
    name = "Java";
    scopeName = "source.java";
    uuid = "2B449DF6-6B1D-11D9-94EC-000D93589AF6";
    
    /* .bsh for BeanShell scripts */
    fileTypes = ( java, bsh );
    
    foldingStartMarker = "\\{\\s*$";
    foldingStopMarker = "^\\s*\\}";

    increaseIndentPattern = "^.*(\\{[^}\"']*|\\([^)\"']*)$";

    smartTypingPairs = (
        ( "(", ")" ),
        ( "[", "]" ),
        ( "{", "}" ),
        ( "\"", "\"" ), 
        ( "'", "'" )
    );
    
    highlightPairs = (
        ( "(", ")" ),
        ( "[", "]" ),
        ( "{", "}" )
    );
    
    patterns = (

        /* comments.block.java */
        {
            // Required to prevent the JavaDoc comment from taking over
            name = "comment.block.java.empty";
            match = "/\\*\\*/";
        },

        {
            name = "comment.block.java";
            begin = "/\\*";
            end = "\\*/";
        },

        {
            name = "comment.block.embedded-docs.java";
            begin = "/\\*\\*";
            patterns = (
                {
                    match = "\\\*\\s*@(param)\\s*([a-z][a-zA-Z0-9_]+)\\s*";
                    captures = {
                        1 = {
                            name = "keyword.embedded-docs.params.java";
                        };
                        2 = {
                            name = "keyword.embedded-docs.value.java";
                        };
                    };
                },

                {
                    match = "\\\*\\s*@([a-zA-Z0-9_-]+)\\s*";
                    captures = {
                        1 = {
                            name = "keyword.embedded-docs.params.java";
                        };
                    };
                },
            );
            end = "\\*/";
        },
        
        /* comments.line.java */
        {
            name = "comment.line.double-slash.java";
            match = "//.*$";
        },

        /* keywords.data-types.java */
        {
            match = "\\b(byte|short|char|int|long|float|double|boolean|[A-Z][A-Za-z0-9]+)\\b";
            captures = {
                1 = { name = "keyword.storage.data-types.java"; };
            };
        },

        /* keywords.access-control.java 
         * @todo fix conflict with keywords.modifiers.java
         */
        {
            match = "\\b(private|protected|public)\\b";
            captures = {
                1 = { name = "keyword.storage.access-control.java"; };
            };
        },
        
        /* keywords.modifiers.java */
        {
            match = "\\b(abstract|final|native|private|protected|public|static|transient|synchronized|volatile|strictfp)\\b";
            captures = {
                1 = {
                    name = "keyword.storage.modifiers.java";
                };
            };
        },
        
        /* keywords.catch-exception.java */
        {
            match = "\\b(try|catch|finally|throw)\\b";
            captures = {
                1 = {
                    name = "keyword.control.catch-exception.java";
                };
            };
        },
        
        /* keywords.control.java */
        {
            match = "\\b(break|case|continue|default|do|while|for|switch|if|else)\\b";
            captures = {
                1 = {
                    name = "keyword.control.java";
                };
            };
        },
        
        /* keywords.class-fns.java */
        {
            match = "\\b(class|extends|implements|import|instanceof|new|package|return|interface|this|throws|void|super)\\b";
            captures = {
                1 = {
                    name = "keyword.class-fns.java";
                };
            };
        },

        /* keywords.assigned-values.java */
        {
            match = "\\b(true|false|null)\\b";
            captures = {
                1 = {
                    name = "keyword.storage.assigned-values.java";
                };
            };
        },
    
        /* constants.numeric.java */
        {
            match = "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\\b";
            captures = {
                1 = {
                    name = "constant.numeric.java";
                };
            };
        },
        
        /* strings.double-quoted.java */
        {
            name = "string.double-quoted.java";
            begin = "\"";
            end = "\"";
            swallow = "\\\\.";
        },

        /* strings.single-quoted.java */
        {
            name = "string.single-quoted.java";
            begin = "'";
            end = "'";
            swallow = "\\\\.";
        },
    );
}
