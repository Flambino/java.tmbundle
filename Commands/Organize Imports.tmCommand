<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveActiveFile</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -w
#
# Provides an Eclipse like Organize Imports except it can't
# add imports.  It cleans up the list by filtering out unused
# imports and alphabetizing the used.
#
# * alphabetizes imports placing java.* and javax.* before others.
# * removes unused imports.
# * maintains any "package.*;" imports
# * supports classes starting with lowercase characters (legacy code)
#

before, imports, after = [], [], []

STDIN.each do |line|  
  if line =~ /\s*^import /
    imports &lt;&lt; line.strip
  elsif imports.empty?
    before &lt;&lt; line
  elsif !imports.empty? &amp;&amp; after.empty?
    # remove empty lines after the imports and before anything else
    after &lt;&lt; line if !line.strip.empty?
  else
    after &lt;&lt; line
  end
end

classes = {}
imports.each do |import|
  import.scan(/\s*import\s+([A-Za-z0-9.]+)\.([a-zA-Z0-9]+);/) do |package, name|
    classes[name] = { :package =&gt; package }
  end
end

after.each do |line|
  next if line =~ %r{^\s*(//|/\*|\*)} #comment
  
  # Attempt to find all classes in the file.  This is loose in that it
  # accepts words with lowercase letters and identifies them as classes.  This is OK
  # since it won't add imports, it's only used to determine if an existing import
  # is valid.
  line.scan(/\b([A-Za-z]\w*)(\b|\.)/) do |name, boundary|
    classes[name][:used] = 1 if classes[name]
  end
end

# Based upon the classes found in the file determine the used imports
java_imports, other_imports = [], []
classes.each_pair do |name, info|
  if info[:used]
    array = (info[:package] =~ /^java[x]?\./) ? java_imports : other_imports
    array &lt;&lt; "import #{info[:package]}.#{name};"
  end
end

# Include any .* imports since they can't be validated
imports.each do |import|
  if import =~ /\.\*\s*;/
    array = (import =~ / java[x]?\./) ? java_imports : other_imports
    array &lt;&lt; import
  end
end

[before, java_imports.sort, [""], other_imports.sort, [""], after].flatten.each do |line|
  puts line
end
</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>@O</string>
	<key>name</key>
	<string>Organize Imports</string>
	<key>output</key>
	<string>replaceSelectedText</string>
	<key>scope</key>
	<string>source.java</string>
	<key>uuid</key>
	<string>E330E2EF-0057-4920-9364-01604C67E664</string>
</dict>
</plist>
